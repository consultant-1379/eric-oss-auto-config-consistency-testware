/*
 * COPYRIGHT Ericsson 2024
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 */

import { group, sleep } from 'k6';
import { htmlReport } from "/modules/plugins/eric-k6-static-report-plugin/eric-k6-static-report-plugin.js"
import http from 'k6/http';
import { textSummary } from 'https://jslib.k6.io/k6-summary/0.0.1/index.js';

import * as gateway from './use_cases/pre_onboarding/gateway-tests.js';
import * as ncmpTest from './use_cases/pre_onboarding/ncmp-tests.js';
import * as restsim from './use_cases/pre_onboarding/restsim.js';
import * as rbac from './use_cases/post_instantiation/rbac-tests.js';
import * as eaccFuncTest from './use_cases/post_instantiation/eacc-func-tests.js';
import * as eaccLoadTest from "./use_cases/post_instantiation/eacc-load-tests.js";
import * as eaccCharTest from "./use_cases/post_instantiation/eacc-char-tests.js";
import { logData } from './modules/common.js';
import { DEFAULT_E2E_OPTIONS, VALIDATE_EACC_RBAC } from './modules/constants.js';

// Set the UUID generated by the K6 image as a constant to be used in your code.
const UUID = `${__ENV.UUID}`;
//Set the API url used to publish results to the K6 Reporting Tool
const K6_API_URL = `${__ENV.K6_API_URL}`;
const EACC_PREFIX = `${__ENV.EACC_PREFIX}`;
const GAS_URL= `${__ENV.GAS_URL}`;

//Summary
export function handleSummary(data) {
  logData('Preparing the end-of-test summary...');

  const result = { stdout: textSummary(data) };
  result['/reports/summary.json'] = JSON.stringify(data);
  return result;
}

// Scenarios
export function preOnboardingScenario() {
    logData("PRE_ONBOARDING");

    group('GIVEN The API Gateway is available', () => {
        gateway.verifySessionCreation();
        gateway.verifyNcmpRouteExists();
        restsim.resetNetworkConfigData();
    });

    group('GIVEN The NCMP API is available', () => {
        ncmpTest.verifyExistingNodes();
    });
}

export function postInstantiationScenario() {

    logData("POST_INSTANTIATION");

    group('GIVEN The API Gateway is available', () => {
        gateway.verifySessionCreation();
        gateway.verifyEaccApiOnboarding();
    });

    group('GIVEN The User Administration API is available', () => {
        if (VALIDATE_EACC_RBAC) {
            rbac.verifyEaccRbac();
        }
        rbac.verifyEaccUser();
        rbac.verifyEaccAdmin();
    });

    logData("Sleeping for 60s to allow RBAC to take effect")
    sleep(60); // Allow RBAC to take place

    if (VALIDATE_EACC_RBAC) {
        group('GIVEN EACC RBAC is in place', () => {
            rbac.verifyRbacEnforced();
        });
    }

    group('GIVEN The Execution and Job Endpoint is Available & required nodes exist', () => {
        eaccFuncTest.verifyPostInvalidRulesetFails();
        eaccFuncTest.verifyPostRulesetIsSuccessful();
        eaccFuncTest.verifyUpdateValidRulesetIsSuccessful();
        eaccFuncTest.verifyUpdateInvalidRulesetFails();
        eaccFuncTest.verifyPostScopeIsSuccessful();
        eaccFuncTest.verifyPostJobIsSuccessful();
        eaccFuncTest.verifyExecutionsExist();
        eaccFuncTest.verifyAuditResults();
        eaccFuncTest.verifyAuditResultsFilteredByFullMatchForMo();
        eaccFuncTest.verifyAuditResultsFilteredByPartialMatchForMo();
        eaccFuncTest.verifyAuditResultsFilteredByLeftLikeMatchForMoFdn();
        eaccFuncTest.verifyAuditResultsFilteredByRightLikeMatchForMoFdn();
        eaccFuncTest.verifyAuditResultsFilteredByInconsistentAuditResultStatus();
        eaccFuncTest.verifyAuditResultsFilteredByAuditStatusAndFilteredByMo();
        eaccFuncTest.verifyApplyChanges();
        eaccFuncTest.verifyRevertChanges();
        eaccFuncTest.verifyPutJobIsSuccessful();
        eaccFuncTest.verifyReadScopeIsSuccessful();
        eaccFuncTest.verifyDeleteJobIsSuccessful();
        eaccFuncTest.verifyUpdateScopeIsSuccessful();
        eaccFuncTest.verifyDeleteRulesetIsSuccessful();
        eaccFuncTest.verifyDeleteScopeIsSuccessful();
    });

    group('GIVEN The Execution and Job Endpoint is Available & Node for Load Testing', () => {
        eaccLoadTest.verifyPostRulesetIsSuccessful();
        eaccLoadTest.verifyPostScopeIsSuccessful();
        eaccLoadTest.verifyPostJobIsSuccessful();
        eaccLoadTest.verifyExecutionsExist();
        eaccLoadTest.verifyApplyAllChanges();
        eaccLoadTest.verifyRevertAllChanges();
        eaccLoadTest.printExecutionStatsForLoadTest();
        eaccLoadTest.verifyDeleteJobIsSuccessful();
        eaccLoadTest.verifyDeleteScopeIsSuccessful();
        eaccLoadTest.verifyDeleteRulesetIsSuccessful();
    });

    group('GIVEN The Log transformer is in place', () => {
        eaccFuncTest.verifyLogStreamingIsSuccessful()
        eaccFuncTest.verifyAuditLogIsSuccessful()
    });

}

export function preOnboardingCharacteristicScenario() {
    logData("PRE_ONBOARDING CHARACTERISTIC");

    group('GIVEN The API Gateway is available', () => {
        gateway.verifySessionCreation();
        gateway.verifyNcmpRouteExists();
    });

    group('GIVEN The CM Handles are populated in NCMP', () => {
        ncmpTest.verifyCMHandles();
    });
}

export function postInstantiationProceduresScenario() {
    logData("POST INSTANTIATION PROCEDURES");

    group('GIVEN The API Gateway is available', () => {
        gateway.verifySessionCreation();
        gateway.verifyEaccApiOnboarding();
    });

    group('GIVEN The User Administration API is available', () => {
        if (VALIDATE_EACC_RBAC) {
            rbac.verifyEaccRbac();
        }
        rbac.verifyEaccUser();
        rbac.verifyEaccAdmin();
    });

    logData("Sleeping for 60s to allow RBAC to take effect")
    sleep(60); // Allow RBAC to take place

    if (VALIDATE_EACC_RBAC) {
        group('GIVEN EACC RBAC is in place', () => {
            rbac.verifyRbacEnforced();
        });
    }

    logData("POST INSTANTIATION PROCEDURES COMPLETED");
}

export function scopeCharacteristicScenario() {
    logData("SCOPE CHARACTERISTIC");

    group('GIVEN The Scope Characteristic tests', () => {
        eaccCharTest.verifyPostScopeIsSuccessful();
        eaccCharTest.verifyReadScopeIsSuccessful();
        eaccCharTest.verifyUpdateScopeIsSuccessful();
        eaccCharTest.verifyDeleteScopeIsSuccessful();
        eaccCharTest.verifyCreateAndReadMaxScopesIsSuccessful();
    });

    logData("SCOPE CHARACTERISTIC COMPLETED");
}

export function postInstantiationCharacteristicScenario() {
    logData("POST INSTANTIATION CHARACTERISTIC");

    group('GIVEN The Job is Created Successfully & scheduled to run', () => {
        eaccCharTest.verifyPostRulesetIsSuccessful();
        eaccCharTest.verifyPostScopeIsSuccessful();
        eaccCharTest.verifyPostJobIsSuccessful();
        eaccCharTest.verifyAuditTimings();
        eaccCharTest.verifyApplyAllChanges();
        eaccCharTest.verifyChangeImplementationTimings();
        eaccCharTest.verifyRevertAllChanges();
        eaccCharTest.verifyRevertChangesTimings();
    });

    logData("POST INSTANTIATION CHARACTERISTIC COMPLETED");
}